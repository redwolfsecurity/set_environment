#!/bin/bash --login

# Making verbose output
set -x

###############################################################################
#
# Function build_tarball() implements the following logic:
#   - copy source code to temporary folder
#   - create tarbal (by compressing copied sources into one "tgz" file)
#   - upload to S3 (by cdn_upload)
#
# Dependencies:
#   Environment variables must be defined:
#      - PRODUCTION_CONTENT_S3_BUCKET_NAME
#      - PRODUCTION_CONTENT_S3_FF_AGENT_PATH
#      - PRODUCTION_CONTENT_CDN_DISTRIBUTION_ID
#
#   Packages:
#      - node
#      - npm
#      - tar
#
# Also build script relies on set_environment functions installed (e.g.: state_set(), ensure_variable_not_empty())
#
# Return:
#   - on success: script exits with code 0
#   - on error: script exits with code 1
#
function build_tarball {

    # Check dependencies: define required variables
    local REQUIRED_VARIABLES=(
        PRODUCTION_CONTENT_S3_BUCKET_NAME
        PRODUCTION_CONTENT_S3_FF_AGENT_PATH
        PRODUCTION_CONTENT_CDN_DISTRIBUTION_ID
    )

    # Check required environment variables are set
    for VARIABLE_NAME in "${REQUIRED_VARIABLES[@]}"; do
        ensure_variable_not_empty "${VARIABLE_NAME}" || {
            local ERROR_DETAILS="Error: failed to ensure variable not empty ${VARIABLE_NAME}"
            # abort "${ERROR_DETAILS}"
            echo "${ERROR_DETAILS}" >&2
            exit 1
        }
    done

    # Check required packages
    #   Packages:
    #      - node
    #      - npm
    #      - tar
    command_exists node >/dev/null || { echo "Error: dependency check failed: node not found" >&2; exit 1; }
    command_exists npm >/dev/null || { echo "Error: dependency check failed: npm not found" >&2; exit 1; }
    command_exists tar >/dev/null || { echo "Error: dependency check failed: tar not found">&2; exit 1; }

    # Define location of temporary folder and tarball filename
    local TARBALL_FILENAME="set_environment.tgz"

    #TEMPORARY_DIR="$( mktemp -d )"
    local TEMPORARY_DIR="/tmp"

    # We need to "npm install" because of aws-sdk dependency (used by cdn_upload.js)
    npm install || { echo "Error: failed to 'npm install'" >&2; exit 1; }

    # Capture date and build git commit numbers into separate files
    echo "BUILD_DATE=$(date +%Y%m%d)  # YYYYMMDD" > build_date || { echo "Error: failed to write build date" >&2; exit 1; }
    echo "BUILD_COMMIT_ID=$(git rev-parse HEAD)"  > build_commit_id || { echo "Error: failed to write build commit id">&2; exit 1; }

    # Delete target tmp "set_environment" folder, otherwise copy will result in wrong folder structure (1 level nested deeper)
    if [ -d "${TEMPORARY_DIR}/set_environment" ]; then
        rm -fr ${TEMPORARY_DIR}/set_environment || { echo "Error: failed to remove temporary folder">&2; exit 1; }
    fi

    # Before creating tarball: move all files into "set_environment" folder.
    # We do so because while Jenkins buidling the project all the files are located in ugly-looking folder:
    #     /var/jenkins_home/jobs/RedWolfSecurity/jobs/set-environment.ja761g/branches/master/workspace
    cp -a $(pwd) ${TEMPORARY_DIR}/set_environment || { echo "Error: failed to copy files">&2; exit 1; }

    # Now we can create tarball which contain just 1 folder 'set_environment'
    # Note on used arguments:
    #       -C  - to tell tar to change directory to ${TEMPORARY_DIR}, so we do not
    #       have nested folders like ${TEMPORARY_DIR}/set_environment inside result tarball)
    #
    #       ${TEMPORARY_DIR}/set_environment.tgz - full path used for the result tarbal otherwize it will be created in
    #                                  current working jenkins directory, like: /var/jenkins_home/jobs/RedWolfSecurity/jobs/set-environment.ja761g/branches/master/workspace
    #
    #      set_environment - last argument is the folder to archive. It does not include full path (like: ${TEMPORARY_DIR}/set_environment)
    #                        because we already specified -C argument.
    #
    tar -C "${TEMPORARY_DIR}" -czf "${TARBALL_FILENAME}" "set_environment" || { echo "Error: failed to create tarball">&2; exit 1; }

    # Upload tarball to S3 so it is available via URL: https:#cdn.redwolfsecurity.com/ff/ff_agent/set_environment.tgz
    node cdn_upload.js \
        "${TARBALL_FILENAME}" \
        "${PRODUCTION_CONTENT_S3_BUCKET_NAME}" \
        "${PRODUCTION_CONTENT_S3_FF_AGENT_PATH}" \
        "${PRODUCTION_CONTENT_CDN_DISTRIBUTION_ID}" \
         || { error "${FUNCNAME[0]}" 'failed_to_cdn_upload'; abort; }

}

build_tarball # no error check since the function aborts on errors
exit 0
