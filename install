#!/usr/bin/env bash

# Caller must source this script.
# Caller can check if set_environment was started by right user (after sourcing ". ./install") by chkecking:
#    - environment variable FF_AGENT_USERNAME
#      Example: if [ "${FF_AGENT_USERNAME}" == "$(whoami)" ]; then echo "I'm the right/proper user"; fi
#
#    - calling bash function is_set_environment_working
#      Example: if is_set_environment_working; then echo "I'm the right/proper user with set_environment installed/working properly."; fi
#
# Note: this script must be sourced due to the following reasons:
#    - we "return" from main body in some cases (for example when we need background install by another user)
#    - we inject lots of environment variables / bash funcitons into the caller's scope, so it can start using them w/o re-login
#    - also caller need all the bash funcitons injected to answer the question "was I right user or need to switch to some other user to get nodejs?".

# Set the SERVICE variable
export SERVICE="set_environment"

###############################################################################
#
function install_set_environment {
    # Log installer started
    logger -t "${SERVICE}" "Installer started by $(whoami) on $(date --utc) under PWD: $(pwd)"

    # This script implements the installer logic of the "set_environment" project.
    # Project github page: [TODO: add a link to the new github location of this project]

    # Change directory into script's directory. This ensure all relative paths working correctly.
    cd "$( dirname ${BASH_SOURCE[0]} )" || { echo "Error: failed to change directory to $( dirname ${BASH_SOURCE[0]} )" >&2; exit 1; } # note: can not yet use error()

    # Source common functions
    source src/ff_bash_functions || { echo "Error: failed to source common functions." >&2; exit 1; } # note: can not yet use error()

    # Initialize terminal
    terminal_initialize || { error "failed_to_initialize_terminal"; exit 1; }

    # Continue by calling OS-specific installer
    source "src/architecture/$( discover_os )/continue_install.sh" "$@" || { error "continue_install.sh returned bad code: ${?}"; exit 1; }

    # Last step: run a selfcheck
    is_set_environment_working || { set_state "${FUNCNAME[0]}" "terminal_error_selfcheck_failed"; abort; }
}

install_set_environment
set_state "${SERVICE}" success
